/**
 * @file PluginProcessor.hpp
 * @brief Header file for the main audio processor of the AvSynth synthesizer plugin
 *
 * This file contains the class declaration for AvSynthAudioProcessor, which handles
 * all audio synthesis, processing, and parameter management for the synthesizer plugin.
 *
 * @author AvSynth Development Team
 * @version 1.0
 * @date 2024
 */

#pragma once

#include "JuceHeader.h"
#include "juce_dsp/juce_dsp.h"
#include "ChorusEffect.hpp"

//==============================================================================

/**
 * @class AvSynthAudioProcessor
 * @brief Main audio processor class for the AvSynth synthesizer plugin
 *
 * This class inherits from juce::AudioProcessor and implements a complete synthesizer
 * with multiple oscillator types, filtering, ADSR envelope, reverb, and chorus effects.
 * It handles MIDI input for note triggering and provides real-time parameter control.
 */
class AvSynthAudioProcessor final : public juce::AudioProcessor {
    friend class AvSynthAudioProcessorEditor;

  public:
    /**
     * @enum Parameters
     * @brief Enumeration of all plugin parameters
     *
     * This enum defines all the controllable parameters in the synthesizer,
     * used for type-safe parameter access with magic_enum.
     */
    enum class Parameters {
        Gain,              ///< Output gain control
        Frequency,         ///< Oscillator frequency
        OscType,          ///< Oscillator waveform type
        LowPassFreq,      ///< Low-pass filter cutoff frequency
        HighPassFreq,     ///< High-pass filter cutoff frequency
        Attack,           ///< ADSR attack time
        Decay,            ///< ADSR decay time
        Sustain,          ///< ADSR sustain level
        Release,          ///< ADSR release time
        ReverbRoomSize,   ///< Reverb room size parameter
        ReverbDamping,    ///< Reverb damping parameter
        ReverbWetLevel,   ///< Reverb wet signal level
        ReverbDryLevel,   ///< Reverb dry signal level
        ReverbWidth,      ///< Reverb stereo width
        ChorusRate,       ///< Chorus modulation rate
        ChorusDepth,      ///< Chorus modulation depth
        ChorusFeedback,   ///< Chorus feedback amount
        ChorusMix,        ///< Chorus wet/dry mix
        NumParameters     ///< Total number of parameters
    };

    /**
     * @enum OscType
     * @brief Enumeration of available oscillator waveform types
     *
     * Defines the different waveform types that can be generated by the oscillator.
     */
    enum class OscType {
        Sine,      ///< Pure sine wave
        Square,    ///< Square wave with sharp transitions
        Saw,       ///< Sawtooth wave with linear slope
        Triangle,  ///< Triangle wave with linear rise and fall
        Flute,     ///< Custom flute-like waveform with harmonics
        NumTypes   ///< Total number of oscillator types
    };

    /**
     * @struct ChainSettings
     * @brief Structure containing all current parameter values
     *
     * This struct holds the current state of all plugin parameters and provides
     * a convenient way to pass parameter values throughout the audio processing chain.
     */
    struct ChainSettings {
        float gain = 0.25f;           ///< Output gain (0.0 to 1.0)
        float frequency = 440.0f;     ///< Oscillator frequency in Hz
        OscType oscType = OscType::Sine; ///< Current oscillator waveform type
        float LowPassFreq = 20000.0f; ///< Low-pass filter cutoff frequency in Hz
        float HighPassFreq = 20.0f;   ///< High-pass filter cutoff frequency in Hz

        // ADSR envelope parameters
        float attack = 0.1f;          ///< Attack time in seconds
        float decay = 0.1f;           ///< Decay time in seconds
        float sustain = 0.7f;         ///< Sustain level (0.0 to 1.0)
        float release = 0.3f;         ///< Release time in seconds

        // Reverb parameters
        float reverbRoomSize = 0.5f;  ///< Reverb room size (0.0 to 1.0)
        float reverbDamping = 0.5f;   ///< Reverb damping (0.0 to 1.0)
        float reverbWetLevel = 0.33f; ///< Reverb wet signal level (0.0 to 1.0)
        float reverbDryLevel = 0.4f;  ///< Reverb dry signal level (0.0 to 1.0)
        float reverbWidth = 1.0f;     ///< Reverb stereo width (0.0 to 1.0)

        // Chorus parameters
        float chorusRate = 0.5f;      ///< Chorus modulation rate in Hz
        float chorusDepth = 0.5f;     ///< Chorus modulation depth (0.0 to 1.0)
        float chorusFeedback = 0.3f;  ///< Chorus feedback amount (0.0 to 0.95)
        float chorusMix = 0.5f;       ///< Chorus wet/dry mix (0.0 to 1.0)

        /**
         * @brief Static method to extract current parameter values from ValueTreeState
         * @param parameters Reference to the plugin's parameter state
         * @return ChainSettings struct populated with current parameter values
         */
        static forcedinline ChainSettings Get(const juce::AudioProcessorValueTreeState &parameters);
    };

  public:
    //==============================================================================

    /**
     * @brief Constructor for AvSynthAudioProcessor
     */
    AvSynthAudioProcessor();

    /**
     * @brief Destructor for AvSynthAudioProcessor
     */
    ~AvSynthAudioProcessor() override;

    //==============================================================================

    /**
     * @brief Prepares the processor for audio playback
     * @param sampleRate The sample rate for audio processing
     * @param samplesPerBlock Maximum number of samples per processing block
     */
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;

    /**
     * @brief Called when audio playback stops to release resources
     */
    void releaseResources() override;

    /**
     * @brief Checks if a bus layout configuration is supported
     * @param layouts The bus layout to validate
     * @return true if the layout is supported, false otherwise
     */
    bool isBusesLayoutSupported(const BusesLayout &layouts) const override;

    /**
     * @brief Main audio processing method
     * @param buffer Audio buffer to process
     * @param midiMessages MIDI messages for this processing block
     */
    void processBlock(juce::AudioBuffer<float> &, juce::MidiBuffer &) override;
    using AudioProcessor::processBlock;

    //==============================================================================

    /**
     * @brief Creates the custom editor component
     * @return Pointer to the newly created editor
     */
    juce::AudioProcessorEditor *createEditor() override;

    /**
     * @brief Indicates whether the processor has a custom editor
     * @return true if custom editor is available
     */
    bool hasEditor() const override;

    //==============================================================================

    /**
     * @brief Returns the name of the plugin
     * @return String containing the plugin name
     */
    const juce::String getName() const override;

    /**
     * @brief Indicates whether the plugin accepts MIDI input
     * @return true if MIDI input is supported
     */
    bool acceptsMidi() const override;

    /**
     * @brief Indicates whether the plugin produces MIDI output
     * @return true if MIDI output is supported
     */
    bool producesMidi() const override;

    /**
     * @brief Indicates whether this is a MIDI effect plugin
     * @return true if this is a MIDI effect
     */
    bool isMidiEffect() const override;

    /**
     * @brief Returns the tail length for time-based effects
     * @return Tail length in seconds
     */
    double getTailLengthSeconds() const override;

    //==============================================================================

    /**
     * @brief Returns the number of available programs
     * @return Number of programs
     */
    int getNumPrograms() override;

    /**
     * @brief Returns the currently selected program index
     * @return Current program index
     */
    int getCurrentProgram() override;

    /**
     * @brief Sets the current program by index
     * @param index Program index to set
     */
    void setCurrentProgram(int index) override;

    /**
     * @brief Returns the name of a program by index
     * @param index Program index
     * @return Program name
     */
    const juce::String getProgramName(int index) override;

    /**
     * @brief Changes the name of a program
     * @param index Program index
     * @param newName New program name
     */
    void changeProgramName(int index, const juce::String &newName) override;

    //==============================================================================

    /**
     * @brief Saves the current plugin state to a memory block
     * @param destData Memory block to store the state
     */
    void getStateInformation(juce::MemoryBlock &destData) override;

    /**
     * @brief Restores plugin state from a memory block
     * @param data Pointer to saved state data
     * @param sizeInBytes Size of the data in bytes
     */
    void setStateInformation(const void *data, int sizeInBytes) override;

    /**
     * @brief Updates the angular delta for oscillator frequency changes
     * @param frequency New frequency in Hz
     */
    void updateAngleDelta(float frequency);

    /**
     * @brief Generates oscillator samples based on waveform type
     * @param type Oscillator waveform type
     * @param angle Current phase angle
     * @return Generated sample value
     */
    static float getOscSample(OscType type, double angle);

    /**
     * @brief Generates flute-like waveform with harmonic content
     * @param angle Current phase angle
     * @return Generated flute sample
     */
    static float getFluteWaveform(double angle);

    /**
     * @brief Updates high-pass filter coefficients
     * @param frequency Cutoff frequency in Hz
     */
    void updateHighPassCoefficients(float frequency);

    /**
     * @brief Updates low-pass filter coefficients
     * @param frequency Cutoff frequency in Hz
     */
    void updateLowPassCoefficients(float frequency);

    /**
     * @brief Updates reverb effect parameters
     * @param settings Current chain settings containing reverb parameters
     */
    void updateReverbParameters(const ChainSettings& settings);

    /**
     * @brief Updates chorus effect parameters
     * @param settings Current chain settings containing chorus parameters
     */
    void updateChorusParameters(const ChainSettings& settings);

  private:
    /**
     * @brief Creates the parameter layout for the audio processor
     * @return Complete parameter layout with all plugin parameters
     */
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

  public:
    /// Audio processor parameter tree state manager
    juce::AudioProcessorValueTreeState parameters{*this, nullptr, "Parameters", createParameterLayout()};

    /// MIDI keyboard state for virtual keyboard input
    juce::MidiKeyboardState keyboardState;

  private:
    /// Random number generator for potential future use
    juce::Random random;

    /// Previous frame's parameter values for change detection
    ChainSettings previousChainSettings;

    /// Circular buffer for audio visualization
    juce::AudioSampleBuffer circularBuffer;

    /// Current write position in the circular buffer
    int bufferWritePos = 0;

  private:
    /// Type alias for single IIR filter
    using Filter = juce::dsp::IIR::Filter<float>;

    /// Type alias for cascaded cut filters (2 filters for 4th order response)
    using CutFilter = juce::dsp::ProcessorChain<Filter, Filter>;

    /// Type alias for complete mono processing chain (high-pass + low-pass)
    using MonoChain = juce::dsp::ProcessorChain<CutFilter, CutFilter>;

    /// Processing chains for left and right channels
    MonoChain leftChain, rightChain;

    /// Current phase angle and phase increment for oscillator
    double currentAngle = 0.0, angleDelta = 0.0;

    // ADSR Envelope components
    juce::ADSR adsr;                    ///< ADSR envelope processor
    juce::ADSR::Parameters adsrParams;  ///< ADSR parameter structure
    bool noteIsOn = false;              ///< Flag indicating if a note is currently pressed

    // Reverb effect components
    juce::dsp::Reverb reverb;                    ///< Reverb effect processor
    juce::dsp::Reverb::Parameters reverbParams; ///< Reverb parameter structure

    // Chorus effect component
    ChorusEffect chorus; ///< Custom chorus effect processor

  private:
    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(AvSynthAudioProcessor)
};